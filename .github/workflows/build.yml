jobs:
  build-linux:
    runs-on: ${{ matrix.name == 'ubuntu-22.04_x86_64' && 'ubuntu-22.04' || 'ubuntu-20.04'
      }}
    steps:
    - uses: actions/checkout@v2
    - name: Disk Cleanup
      run: |
        df -h
        docker rmi `docker images -q -a`
        # 3.9GB
        sudo rm -rf /usr/local/share/boost
        # 17GB
        sudo rm -rf /usr/share/dotnet
        df -h
    - if: endsWith(matrix.name, '_x86_64')
      name: Setup ${{ matrix.name }} for x86_64
      run: sudo scripts/apt_install_x86_64.sh
    - if: contains(matrix.name, '_armv')
      name: Setup ${{ matrix.name }} for arm
      run: sudo scripts/apt_install_arm.sh
    - if: matrix.name == 'android'
      name: Setup ${{ matrix.name }} for android
      run: sudo scripts/apt_install_x86_64.sh && sudo apt-get install -y openjdk-11-jdk
    - name: Build ${{ matrix.name }}
      run: |
        python3 run.py build ${{ matrix.name }}
        python3 run.py package ${{ matrix.name }}
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.tar.gz
        path: _package/${{ matrix.name }}/webrtc.tar.gz
    strategy:
      fail-fast: false
      matrix:
        name:
        - raspberry-pi-os_armv6
        - raspberry-pi-os_armv7
        - raspberry-pi-os_armv8
        - ubuntu-18.04_armv8
        - ubuntu-20.04_armv8
        - ubuntu-20.04_x86_64
        - ubuntu-22.04_x86_64
        - android
  build-macos:
    runs-on: macOS-11.0
    steps:
    - uses: actions/checkout@v2
    - name: Select Xcode 13.0
      run: sudo xcode-select --switch /Applications/Xcode_13.0.app/Contents/Developer
    - if: matrix.name == 'macos_arm64'
      name: Build ${{ matrix.name }} for macos
      run: |
        python3 run.py build ${{ matrix.name }}
        python3 run.py package ${{ matrix.name }}
    - if: matrix.name == 'ios'
      name: Build ${{ matrix.name }} for ios
      run: |
        python3 run.py build ${{ matrix.name }} --webrtc-overlap-ios-build-dir
        python3 run.py package ${{ matrix.name }} --webrtc-overlap-ios-build-dir
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.tar.gz
        path: _package/${{ matrix.name }}/webrtc.tar.gz
    strategy:
      fail-fast: false
      matrix:
        name:
        - macos_arm64
        - ios
  build-windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Disk Cleanup
      run: |
        Get-PSDrive
        # Cache 済み Docker Image の削除
        docker rmi $(docker images -q -a)
        # Android SDK の削除
        if ($Env:ANDROID_HOME) {
          Remove-Item -Recurse -Force $Env:ANDROID_HOME -ErrorAction Ignore
        }
        if ($Env:ANDROID_NDK_HOME) {
          Remove-Item -Recurse -Force $Env:ANDROID_NDK_HOME -ErrorAction Ignore
        }
        # JVM の削除
        if ($Env:JAVA_HOME_11_X64) {
          Remove-Item -Recurse -Force $Env:JAVA_HOME_11_X64 -ErrorAction Ignore
        }
        if ($Env:JAVA_HOME_8_X64) {
          Remove-Item -Recurse -Force $Env:JAVA_HOME_8_X64 -ErrorAction Ignore
        }
        Get-PSDrive
    - name: Build ${{ matrix.name }}
      run: |
        # リポジトリの下に置きたいが、GitHub Actions の D:\ の容量が少なくてビルド出来ない問題があるので
        # このパスにソースを配置する。
        # また、WebRTC のビルドしたファイルは同じドライブに無いといけないっぽいのでこちらも設定する。
        python3 run.py build ${{ matrix.name }} --source-dir 'C:\webrtc' --build-dir 'C:\webrtc-build'
        python3 run.py package ${{ matrix.name }} --source-dir 'C:\webrtc' --build-dir 'C:\webrtc-build'
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.zip
        path: _package\${{ matrix.name }}\webrtc.zip
    strategy:
      fail-fast: false
      matrix:
        name:
        - windows_x86_64
        - windows_arm64
  create-release:
    if: contains(github.ref, 'tags/m')
    name: Create Release
    needs:
    - build-windows
    - build-macos
    - build-linux
    runs-on: ubuntu-20.04
    steps:
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release
      name: Create Release
      uses: actions/create-release@v1.0.0
      with:
        draft: false
        prerelease: false
        release_name: Release ${{ github.ref }}
        tag_name: ${{ github.ref }}
    - name: Output upload url
      run: echo "UPLOAD_URL='${{ steps.create_release.outputs.upload_url }}'" > create-release.env
      shell: bash
    - name: Upload create-release Environment
      uses: actions/upload-artifact@v1
      with:
        name: create-release.env
        path: create-release.env
  upload-assets:
    if: contains(github.ref, 'tags/m')
    name: Release ${{ matrix.name }}
    needs:
    - create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download ${{ matrix.name }}
      uses: actions/download-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.tar.gz
    - uses: actions/download-artifact@v1
      with:
        name: create-release.env
    - id: env
      name: Env to output
      run: |
        source create-release.env/create-release.env
        echo "::set-output name=upload_url::$UPLOAD_URL"
      shell: bash
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Upload ${{ matrix.name }} Release Asset
      uses: actions/upload-release-asset@v1.0.1
      with:
        asset_content_type: application/gzip
        asset_name: webrtc.${{ matrix.name }}.tar.gz
        asset_path: webrtc.${{ matrix.name }}.tar.gz/webrtc.tar.gz
        upload_url: ${{ steps.env.outputs.upload_url }}
    strategy:
      fail-fast: false
      matrix:
        name:
        - macos_arm64
        - ios
        - raspberry-pi-os_armv6
        - raspberry-pi-os_armv7
        - raspberry-pi-os_armv8
        - ubuntu-18.04_armv8
        - ubuntu-20.04_armv8
        - ubuntu-20.04_x86_64
        - ubuntu-22.04_x86_64
        - android
  upload-assets-windows:
    if: contains(github.ref, 'tags/m')
    name: Upload windows
    needs:
    - create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download ${{ matrix.name }}
      uses: actions/download-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.zip
    - uses: actions/download-artifact@v1
      with:
        name: create-release.env
    - id: env
      name: Env to output
      run: |
        source create-release.env/create-release.env
        echo "::set-output name=upload_url::$UPLOAD_URL"
      shell: bash
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Upload windows Release Asset
      uses: actions/upload-release-asset@v1.0.1
      with:
        asset_content_type: application/zip
        asset_name: webrtc.${{ matrix.name }}.zip
        asset_path: webrtc.${{ matrix.name }}.zip/webrtc.zip
        upload_url: ${{ steps.env.outputs.upload_url }}
    strategy:
      fail-fast: false
      matrix:
        name:
        - windows_x86_64
        - windows_arm64
name: build
"on":
  push:
    branches-ignore:
    - daily
    paths-ignore:
    - '**.md'
    - LICENSE
    - NOTICE
    - .gitignore
    tags:
    - '*'
